name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
    branches:
      - main   # Also trigger on pushes to main for auto-tagging
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  # Auto-tagging job - runs on push to main, creates tags automatically
  auto-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    outputs:
      should_release: ${{ steps.create-tag.outputs.should_release }}
      new_tag: ${{ steps.create-tag.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine version bump and create tag
        id: create-tag
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -pe "require('./package.json').version")
          
          # Determine version bump type from commit message
          COMMIT_MSG=$(git log --format=%B -n 1)
          
          if echo "$COMMIT_MSG" | grep -qE "BREAKING CHANGE|breaking change|^[^:]*!:"; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qE "^feat|^feature"; then
            BUMP_TYPE="minor"  
          else
            BUMP_TYPE="patch"
          fi
          
          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          # Check if tag already exists
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Creating tag $NEW_TAG"
            git tag "$NEW_TAG"
            git push origin "$NEW_TAG"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          fi

  # Manual tagging job - runs on workflow dispatch
  manual-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    outputs:
      should_release: ${{ steps.create-tag.outputs.should_release }}
      new_tag: ${{ steps.create-tag.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create manual tag
        id: create-tag
        run: |
          # Get current version and bump it
          CURRENT_VERSION=$(node -pe "require('./package.json').version")
          BUMP_TYPE="${{ github.event.inputs.version-type }}"
          
          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          echo "Creating manual tag $NEW_TAG"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (needs.auto-tag.result == 'success' && needs.auto-tag.outputs.should_release == 'true') ||
      (needs.manual-tag.result == 'success' && needs.manual-tag.outputs.should_release == 'true')
    needs: [auto-tag, manual-tag]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration

  release:
    needs: [test, auto-tag, manual-tag]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (needs.auto-tag.result == 'success' && needs.auto-tag.outputs.should_release == 'true') ||
      (needs.manual-tag.result == 'success' && needs.manual-tag.outputs.should_release == 'true')
    permissions:
      contents: write
      actions: read
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Extract version from tag or job output
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Direct tag push
            TAG_NAME=${GITHUB_REF#refs/tags/}
          elif [[ "${{ needs.auto-tag.outputs.new_tag }}" != "" ]]; then
            # Auto-generated tag
            TAG_NAME=${{ needs.auto-tag.outputs.new_tag }}
          elif [[ "${{ needs.manual-tag.outputs.new_tag }}" != "" ]]; then
            # Manual tag
            TAG_NAME=${{ needs.manual-tag.outputs.new_tag }}
          else
            echo "Error: No tag found"
            exit 1
          fi
          echo "version=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Update package.json version to match tag
        run: |
          TAG_NAME="${{ steps.version.outputs.version }}"
          # Remove 'v' prefix if present for package.json
          VERSION_CLEAN=${TAG_NAME#v}
          npm version $VERSION_CLEAN --no-git-tag-version --allow-same-version

      - name: Generate changelog
        id: changelog
        run: |
          CURRENT_TAG="${{ steps.version.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${CURRENT_TAG}~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${CURRENT_TAG} --pretty=format:"- %s (%h)" --no-merges)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in ${{ steps.version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  docker:
    needs: [release, auto-tag, manual-tag]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (needs.auto-tag.result == 'success' && needs.auto-tag.outputs.should_release == 'true') ||
      (needs.manual-tag.result == 'success' && needs.manual-tag.outputs.should_release == 'true')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version for tags
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
            # Direct tag push
            TAG_NAME=${GITHUB_REF#refs/tags/}
          elif [[ "${{ needs.auto-tag.outputs.new_tag }}" != "" ]]; then
            # Auto-generated tag
            TAG_NAME=${{ needs.auto-tag.outputs.new_tag }}
          elif [[ "${{ needs.manual-tag.outputs.new_tag }}" != "" ]]; then
            # Manual tag
            TAG_NAME=${{ needs.manual-tag.outputs.new_tag }}
          else
            echo "Error: No tag found"
            exit 1
          fi
          
          # Remove 'v' prefix if present
          VERSION_CLEAN=${TAG_NAME#v}
          echo "version_clean=${VERSION_CLEAN}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          
          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_CLEAN"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          echo "major=${MAJOR}" >> $GITHUB_OUTPUT
          echo "minor=${MINOR}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pubg-tracker-bot:${{ steps.version.outputs.tag_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pubg-tracker-bot:${{ steps.version.outputs.version_clean }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pubg-tracker-bot:${{ steps.version.outputs.major }}.${{ steps.version.outputs.minor }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pubg-tracker-bot:${{ steps.version.outputs.major }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pubg-tracker-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max 